/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GAINUSDTDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS"
      | "CREATOR_BPS"
      | "DIRECT_BPS"
      | "MAX_SLOT"
      | "ROYALTY_BP"
      | "SLOT_PRICE"
      | "UPLINE_BPS"
      | "USDT"
      | "creatorWallet"
      | "flashWallet"
      | "qualifiedDirects"
      | "referrerOf"
      | "registerApproval"
      | "registeredAllowance"
      | "slotBuy"
      | "tokenDecimals"
      | "userSlot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalRegistered"
      | "RoyaltyPaid"
      | "SlotPurchased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CREATOR_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIRECT_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_SLOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_BP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SLOT_PRICE",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UPLINE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creatorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qualifiedDirects",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredAllowance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slotBuy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userSlot",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATOR_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DIRECT_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_SLOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROYALTY_BP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SLOT_PRICE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UPLINE_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qualifiedDirects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userSlot", data: BytesLike): Result;
}

export namespace ApprovalRegisteredEvent {
  export type InputTuple = [
    user: AddressLike,
    allowance: BigNumberish,
    blockNum: BigNumberish
  ];
  export type OutputTuple = [user: string, allowance: bigint, blockNum: bigint];
  export interface OutputObject {
    user: string;
    allowance: bigint;
    blockNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyPaidEvent {
  export type InputTuple = [
    recipient: AddressLike,
    level: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [recipient: string, level: bigint, amount: bigint];
  export interface OutputObject {
    recipient: string;
    level: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    sponsor: AddressLike,
    slotId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    sponsor: string,
    slotId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    sponsor: string;
    slotId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GAINUSDTDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): GAINUSDTDistributor;
  waitForDeployment(): Promise<this>;

  interface: GAINUSDTDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS: TypedContractMethod<[], [bigint], "view">;

  CREATOR_BPS: TypedContractMethod<[], [bigint], "view">;

  DIRECT_BPS: TypedContractMethod<[], [bigint], "view">;

  MAX_SLOT: TypedContractMethod<[], [bigint], "view">;

  ROYALTY_BP: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  SLOT_PRICE: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  UPLINE_BPS: TypedContractMethod<[], [bigint], "view">;

  USDT: TypedContractMethod<[], [string], "view">;

  creatorWallet: TypedContractMethod<[], [string], "view">;

  flashWallet: TypedContractMethod<[], [string], "view">;

  qualifiedDirects: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  referrerOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  registerApproval: TypedContractMethod<[], [void], "nonpayable">;

  registeredAllowance: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { allowance: bigint; blockNum: bigint }],
    "view"
  >;

  slotBuy: TypedContractMethod<
    [slotId: BigNumberish, sponsor: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenDecimals: TypedContractMethod<[], [bigint], "view">;

  userSlot: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CREATOR_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DIRECT_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SLOT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROYALTY_BP"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLOT_PRICE"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPLINE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creatorWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flashWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qualifiedDirects"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "referrerOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredAllowance"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { allowance: bigint; blockNum: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "slotBuy"
  ): TypedContractMethod<
    [slotId: BigNumberish, sponsor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userSlot"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ApprovalRegistered"
  ): TypedContractEvent<
    ApprovalRegisteredEvent.InputTuple,
    ApprovalRegisteredEvent.OutputTuple,
    ApprovalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyPaid"
  ): TypedContractEvent<
    RoyaltyPaidEvent.InputTuple,
    RoyaltyPaidEvent.OutputTuple,
    RoyaltyPaidEvent.OutputObject
  >;
  getEvent(
    key: "SlotPurchased"
  ): TypedContractEvent<
    SlotPurchasedEvent.InputTuple,
    SlotPurchasedEvent.OutputTuple,
    SlotPurchasedEvent.OutputObject
  >;

  filters: {
    "ApprovalRegistered(address,uint256,uint256)": TypedContractEvent<
      ApprovalRegisteredEvent.InputTuple,
      ApprovalRegisteredEvent.OutputTuple,
      ApprovalRegisteredEvent.OutputObject
    >;
    ApprovalRegistered: TypedContractEvent<
      ApprovalRegisteredEvent.InputTuple,
      ApprovalRegisteredEvent.OutputTuple,
      ApprovalRegisteredEvent.OutputObject
    >;

    "RoyaltyPaid(address,uint8,uint256)": TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;
    RoyaltyPaid: TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;

    "SlotPurchased(address,address,uint8,uint256)": TypedContractEvent<
      SlotPurchasedEvent.InputTuple,
      SlotPurchasedEvent.OutputTuple,
      SlotPurchasedEvent.OutputObject
    >;
    SlotPurchased: TypedContractEvent<
      SlotPurchasedEvent.InputTuple,
      SlotPurchasedEvent.OutputTuple,
      SlotPurchasedEvent.OutputObject
    >;
  };
}
