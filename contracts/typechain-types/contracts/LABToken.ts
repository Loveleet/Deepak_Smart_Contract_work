/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LABToken {
  export type FeeConfigStruct = {
    platformFeeBps: BigNumberish;
    creatorFeeBps: BigNumberish;
    royaltyFeeBps: BigNumberish;
    referrerFeeBps: BigNumberish;
  };

  export type FeeConfigStructOutput = [
    platformFeeBps: bigint,
    creatorFeeBps: bigint,
    royaltyFeeBps: bigint,
    referrerFeeBps: bigint
  ] & {
    platformFeeBps: bigint;
    creatorFeeBps: bigint;
    royaltyFeeBps: bigint;
    referrerFeeBps: bigint;
  };
}

export interface LABTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_DENOMINATOR"
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "FEE_MANAGER_ROLE"
      | "FLASH_ROLE"
      | "MAX_FEE_BPS"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "creatorTransfer"
      | "creatorWallet"
      | "decimals"
      | "directCommission"
      | "eip712Domain"
      | "flashTransfer"
      | "getFees"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "mint"
      | "name"
      | "nonces"
      | "pause"
      | "paused"
      | "permit"
      | "platformWallet"
      | "renounceRole"
      | "revokeRole"
      | "royaltyTransfer"
      | "royaltyWallet"
      | "setFeeWallets"
      | "setFees"
      | "slotBuy"
      | "superRoyaltyTransfer"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CreatorPaid"
      | "DirectCommission"
      | "EIP712DomainChanged"
      | "FeeWalletsUpdated"
      | "FeesUpdated"
      | "FlashTransfer"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoyaltyPaid"
      | "SlotBuy"
      | "SuperRoyaltyPaid"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLASH_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorTransfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "directCommission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashTransfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyTransfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWallets",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, LABToken.FeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "slotBuy",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "superRoyaltyTransfer",
    values: [AddressLike, BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FLASH_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "superRoyaltyTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatorPaidEvent {
  export type InputTuple = [
    operator: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish,
    creatorFee: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    recipient: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint,
    creatorFee: bigint
  ];
  export interface OutputObject {
    operator: string;
    recipient: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
    creatorFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectCommissionEvent {
  export type InputTuple = [
    operator: AddressLike,
    seller: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish,
    creatorFee: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    seller: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint,
    creatorFee: bigint
  ];
  export interface OutputObject {
    operator: string;
    seller: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
    creatorFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWalletsUpdatedEvent {
  export type InputTuple = [
    platformWallet: AddressLike,
    creatorWallet: AddressLike,
    royaltyWallet: AddressLike
  ];
  export type OutputTuple = [
    platformWallet: string,
    creatorWallet: string,
    royaltyWallet: string
  ];
  export interface OutputObject {
    platformWallet: string;
    creatorWallet: string;
    royaltyWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    feeType: BigNumberish,
    platformFeeBps: BigNumberish,
    creatorFeeBps: BigNumberish,
    royaltyFeeBps: BigNumberish,
    referrerFeeBps: BigNumberish
  ];
  export type OutputTuple = [
    feeType: bigint,
    platformFeeBps: bigint,
    creatorFeeBps: bigint,
    royaltyFeeBps: bigint,
    referrerFeeBps: bigint
  ];
  export interface OutputObject {
    feeType: bigint;
    platformFeeBps: bigint;
    creatorFeeBps: bigint;
    royaltyFeeBps: bigint;
    referrerFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashTransferEvent {
  export type InputTuple = [
    operator: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    to: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint
  ];
  export interface OutputObject {
    operator: string;
    to: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyPaidEvent {
  export type InputTuple = [
    operator: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish,
    royaltyFee: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    recipient: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint,
    royaltyFee: bigint
  ];
  export interface OutputObject {
    operator: string;
    recipient: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
    royaltyFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotBuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    recipient: AddressLike,
    referrer: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish,
    creatorFee: BigNumberish,
    royaltyFee: BigNumberish,
    referrerFee: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    recipient: string,
    referrer: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint,
    creatorFee: bigint,
    royaltyFee: bigint,
    referrerFee: bigint
  ];
  export interface OutputObject {
    buyer: string;
    recipient: string;
    referrer: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
    creatorFee: bigint;
    royaltyFee: bigint;
    referrerFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperRoyaltyPaidEvent {
  export type InputTuple = [
    operator: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    netAmount: BigNumberish,
    platformFee: BigNumberish,
    royaltyFee: BigNumberish,
    payees: AddressLike[],
    payouts: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    recipient: string,
    amount: bigint,
    netAmount: bigint,
    platformFee: bigint,
    royaltyFee: bigint,
    payees: string[],
    payouts: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    recipient: string;
    amount: bigint;
    netAmount: bigint;
    platformFee: bigint;
    royaltyFee: bigint;
    payees: string[];
    payouts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LABToken extends BaseContract {
  connect(runner?: ContractRunner | null): LABToken;
  waitForDeployment(): Promise<this>;

  interface: LABTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  FLASH_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  creatorTransfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  creatorWallet: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  directCommission: TypedContractMethod<
    [seller: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  flashTransfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFees: TypedContractMethod<
    [feeType: BigNumberish],
    [LABToken.FeeConfigStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  platformWallet: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyTransfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  royaltyWallet: TypedContractMethod<[], [string], "view">;

  setFeeWallets: TypedContractMethod<
    [
      platformWallet_: AddressLike,
      creatorWallet_: AddressLike,
      royaltyWallet_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [feeType: BigNumberish, config: LABToken.FeeConfigStruct],
    [void],
    "nonpayable"
  >;

  slotBuy: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  superRoyaltyTransfer: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      payees: AddressLike[],
      basisPoints: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FLASH_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorTransfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "directCommission"
  ): TypedContractMethod<
    [seller: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashTransfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFees"
  ): TypedContractMethod<
    [feeType: BigNumberish],
    [LABToken.FeeConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyTransfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFeeWallets"
  ): TypedContractMethod<
    [
      platformWallet_: AddressLike,
      creatorWallet_: AddressLike,
      royaltyWallet_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [feeType: BigNumberish, config: LABToken.FeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slotBuy"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "superRoyaltyTransfer"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      payees: AddressLike[],
      basisPoints: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CreatorPaid"
  ): TypedContractEvent<
    CreatorPaidEvent.InputTuple,
    CreatorPaidEvent.OutputTuple,
    CreatorPaidEvent.OutputObject
  >;
  getEvent(
    key: "DirectCommission"
  ): TypedContractEvent<
    DirectCommissionEvent.InputTuple,
    DirectCommissionEvent.OutputTuple,
    DirectCommissionEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeWalletsUpdated"
  ): TypedContractEvent<
    FeeWalletsUpdatedEvent.InputTuple,
    FeeWalletsUpdatedEvent.OutputTuple,
    FeeWalletsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlashTransfer"
  ): TypedContractEvent<
    FlashTransferEvent.InputTuple,
    FlashTransferEvent.OutputTuple,
    FlashTransferEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyPaid"
  ): TypedContractEvent<
    RoyaltyPaidEvent.InputTuple,
    RoyaltyPaidEvent.OutputTuple,
    RoyaltyPaidEvent.OutputObject
  >;
  getEvent(
    key: "SlotBuy"
  ): TypedContractEvent<
    SlotBuyEvent.InputTuple,
    SlotBuyEvent.OutputTuple,
    SlotBuyEvent.OutputObject
  >;
  getEvent(
    key: "SuperRoyaltyPaid"
  ): TypedContractEvent<
    SuperRoyaltyPaidEvent.InputTuple,
    SuperRoyaltyPaidEvent.OutputTuple,
    SuperRoyaltyPaidEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CreatorPaid(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreatorPaidEvent.InputTuple,
      CreatorPaidEvent.OutputTuple,
      CreatorPaidEvent.OutputObject
    >;
    CreatorPaid: TypedContractEvent<
      CreatorPaidEvent.InputTuple,
      CreatorPaidEvent.OutputTuple,
      CreatorPaidEvent.OutputObject
    >;

    "DirectCommission(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DirectCommissionEvent.InputTuple,
      DirectCommissionEvent.OutputTuple,
      DirectCommissionEvent.OutputObject
    >;
    DirectCommission: TypedContractEvent<
      DirectCommissionEvent.InputTuple,
      DirectCommissionEvent.OutputTuple,
      DirectCommissionEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FeeWalletsUpdated(address,address,address)": TypedContractEvent<
      FeeWalletsUpdatedEvent.InputTuple,
      FeeWalletsUpdatedEvent.OutputTuple,
      FeeWalletsUpdatedEvent.OutputObject
    >;
    FeeWalletsUpdated: TypedContractEvent<
      FeeWalletsUpdatedEvent.InputTuple,
      FeeWalletsUpdatedEvent.OutputTuple,
      FeeWalletsUpdatedEvent.OutputObject
    >;

    "FeesUpdated(uint8,uint16,uint16,uint16,uint16)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "FlashTransfer(address,address,uint256,uint256,uint256)": TypedContractEvent<
      FlashTransferEvent.InputTuple,
      FlashTransferEvent.OutputTuple,
      FlashTransferEvent.OutputObject
    >;
    FlashTransfer: TypedContractEvent<
      FlashTransferEvent.InputTuple,
      FlashTransferEvent.OutputTuple,
      FlashTransferEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoyaltyPaid(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;
    RoyaltyPaid: TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;

    "SlotBuy(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SlotBuyEvent.InputTuple,
      SlotBuyEvent.OutputTuple,
      SlotBuyEvent.OutputObject
    >;
    SlotBuy: TypedContractEvent<
      SlotBuyEvent.InputTuple,
      SlotBuyEvent.OutputTuple,
      SlotBuyEvent.OutputObject
    >;

    "SuperRoyaltyPaid(address,address,uint256,uint256,uint256,uint256,address[],uint256[])": TypedContractEvent<
      SuperRoyaltyPaidEvent.InputTuple,
      SuperRoyaltyPaidEvent.OutputTuple,
      SuperRoyaltyPaidEvent.OutputObject
    >;
    SuperRoyaltyPaid: TypedContractEvent<
      SuperRoyaltyPaidEvent.InputTuple,
      SuperRoyaltyPaidEvent.OutputTuple,
      SuperRoyaltyPaidEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
